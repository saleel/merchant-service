enum TokenStandard {
  Erc721
  Erc20
}

enum OrderStatus {
  Pending
  Complete
}


input CreateOrderInput {
  productId: String!
  quantity: Float!
  buyerAddress: String!
  buyerTransaction: String!
  atomicSwapSalt: Int!
}

input ProductInput {
  name: String!
  description: String
  imageUrl: String
  tokenStandard: TokenStandard!
  contractAddress: String!
  tokenId: String
  availableQuantity: Int!
  price: Float!
}

input EditProductInput {
  name: String!
  description: String
  imageUrl: String
  availableQuantity: Int!
  price: Float!
}


type Product {
  id: String!
  name: String!
  description: String
  imageUrl: String
  tokenStandard: TokenStandard!
  contractAddress: String!
  tokenId: String
  availableQuantity: Int!
  price: Float!
  createdAt: String!
  updatedAt: String!
}

type Order {
  id: String
  product: Product
  quantity: Float
  buyerAddress: String
  buyerTransaction: String
  buyerTransactionHash: String
  sellerTransaction: String
  sellerTransactionHash: String
  amount: Float
  status: OrderStatus
  createdAt: String!
  updatedAt: String!
}

type DailyOrderSnapshot {
  timestamp: String!
  totalOrders: Int!
  totalOrderAmount: Int!
}

type TopProductByAmount {
  productName: String!
  totalOrderAmount: Int!
}

type TopProductByQuantity {
  productName: String!
  totalSold: Int!
}

type TopBuyer {
  buyerAddress: String!
  totalOrderAmount: Int!
}

type StoreMetrics {
  totalProducts: Int!
  totalInventoryValue: Int!
  totalOrders: Int!
  totalOrderAmount: Float!
  dailyOrderSnapshots: [DailyOrderSnapshot!]!
  topProductsByAmount: [TopProductByAmount!]!
  topProductsByQuantity: [TopProductByQuantity!]!
  topBuyers: [TopBuyer!]!
}

type Query {
  getProduct(id: String): Product @auth
  findProducts: [Product] @auth
  getOrder(id: String): Order @auth
  findOrders(status: OrderStatus, productId: String): [Order] @auth
  getStoreMetrics(startDate: String, endDate: String): StoreMetrics
}

type Mutation {
  signIn(message: String!, signature: String!) : String
  addProduct(product: ProductInput!) : Product @auth
  editProduct(id: String!, productData: EditProductInput!) : Product @auth
  createOrder(order: CreateOrderInput!) : Order
}
